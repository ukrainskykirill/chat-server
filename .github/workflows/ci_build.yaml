name: BUILD_CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: "cr.selcloud.ru/killreal"
  IMAGE_NAME: "chat-server"
  CONTAINER_NAME: "chat-server-container"


jobs:
  image-build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout main
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        run: docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD}} $REGISTRY

      - name: Build and Push Docker Image
        run: |
          TAG_NAME=$(echo $GITHUB_SHA | head -c7)
          docker buildx create --use
          docker buildx build --no-cache --push --tag $REGISTRY/$IMAGE_NAME:$TAG_NAME -f Dockerfile . \
          --build-arg DB_USER=${{ secrets.DB_USER }} \
          --build-arg DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
          --build-arg DB_PORT=${{ secrets.DB_PORT }} \
          --build-arg DB_DATABASE_NAME=${{ secrets.DB_DATABASE_NAME }} \
          --build-arg MIGRATION_DIR=${{ secrets.MIGRATION_DIR }} \
          --build-arg SSL_MODE=${{ secrets.SSL_MODE }} \
          --build-arg DB_HOST=${{ secrets.DB_HOST }} \
          --build-arg GRPC_PORT=${{ secrets.GRPC_PORT }}

  deploy-image:
      runs-on: ubuntu-latest
      needs: image-build-and-push

      steps:
        - name: Deploy to Selectel Cloud via SSH action
          uses: appleboy/ssh-action@v1.0.3
          with:
            host: ${{ secrets.SERVER_HOST }}
            username: ${{ secrets.SSH_USERNAME }}
            key: ${{ secrets.SSHKEY }}
            envs: IMAGE_NAME,REGISTRY,GITHUB_SHA,CONTAINER_NAME
            script: |
              # Set up variables
              TAG_NAME=$(echo $GITHUB_SHA | head -c7)
              
              # Login into Selectel Registry
              docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }} $REGISTRY
              
              # Stop running container
              docker stop $CONTAINER_NAME
              
              # Remove old container
              docker rm $CONTAINER_NAME
              
              # Run a new container from a new image
              docker run -d -p ${{ secrets.GRPC_PORT }}:${{ secrets.GRPC_PORT }} --name $CONTAINER_NAME -t $REGISTRY/$IMAGE_NAME:$TAG_NAME

  migration-build:
    runs-on: ubuntu-latest
    needs: deploy-image

    steps:
      - name: Checkout main
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build migrations
        run: |
          docker buildx create --use
          docker buildx build --no-cache -f prod-migrations.Dockerfile . \
          --build-arg DB_USER=${{ secrets.DB_USER }} \
          --build-arg DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
          --build-arg DB_PORT=${{ secrets.DB_PORT }} \
          --build-arg DB_DATABASE_NAME=${{ secrets.DB_DATABASE_NAME }} \
          --build-arg MIGRATION_DIR=${{ secrets.MIGRATION_DIR }} \
          --build-arg SSL_MODE=${{ secrets.SSL_MODE }} \
          --build-arg DB_HOST=${{ secrets.DB_HOST }}