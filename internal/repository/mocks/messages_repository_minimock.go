// Code generated by http://github.com/gojuno/minimock (v3.3.14). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/ukrainskykirill/chat-server/internal/repository.MessagesRepository -o messages_repository_minimock.go -n MessagesRepositoryMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/ukrainskykirill/chat-server/internal/model"
)

// MessagesRepositoryMock implements repository.MessagesRepository
type MessagesRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreate          func(ctx context.Context, msgIn *model.MessageIn) (err error)
	inspectFuncCreate   func(ctx context.Context, msgIn *model.MessageIn)
	afterCreateCounter  uint64
	beforeCreateCounter uint64
	CreateMock          mMessagesRepositoryMockCreate

	funcDeleteByChatID          func(ctx context.Context, chatID int64) (err error)
	inspectFuncDeleteByChatID   func(ctx context.Context, chatID int64)
	afterDeleteByChatIDCounter  uint64
	beforeDeleteByChatIDCounter uint64
	DeleteByChatIDMock          mMessagesRepositoryMockDeleteByChatID
}

// NewMessagesRepositoryMock returns a mock for repository.MessagesRepository
func NewMessagesRepositoryMock(t minimock.Tester) *MessagesRepositoryMock {
	m := &MessagesRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateMock = mMessagesRepositoryMockCreate{mock: m}
	m.CreateMock.callArgs = []*MessagesRepositoryMockCreateParams{}

	m.DeleteByChatIDMock = mMessagesRepositoryMockDeleteByChatID{mock: m}
	m.DeleteByChatIDMock.callArgs = []*MessagesRepositoryMockDeleteByChatIDParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mMessagesRepositoryMockCreate struct {
	optional           bool
	mock               *MessagesRepositoryMock
	defaultExpectation *MessagesRepositoryMockCreateExpectation
	expectations       []*MessagesRepositoryMockCreateExpectation

	callArgs []*MessagesRepositoryMockCreateParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// MessagesRepositoryMockCreateExpectation specifies expectation struct of the MessagesRepository.Create
type MessagesRepositoryMockCreateExpectation struct {
	mock      *MessagesRepositoryMock
	params    *MessagesRepositoryMockCreateParams
	paramPtrs *MessagesRepositoryMockCreateParamPtrs
	results   *MessagesRepositoryMockCreateResults
	Counter   uint64
}

// MessagesRepositoryMockCreateParams contains parameters of the MessagesRepository.Create
type MessagesRepositoryMockCreateParams struct {
	ctx   context.Context
	msgIn *model.MessageIn
}

// MessagesRepositoryMockCreateParamPtrs contains pointers to parameters of the MessagesRepository.Create
type MessagesRepositoryMockCreateParamPtrs struct {
	ctx   *context.Context
	msgIn **model.MessageIn
}

// MessagesRepositoryMockCreateResults contains results of the MessagesRepository.Create
type MessagesRepositoryMockCreateResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreate *mMessagesRepositoryMockCreate) Optional() *mMessagesRepositoryMockCreate {
	mmCreate.optional = true
	return mmCreate
}

// Expect sets up expected params for MessagesRepository.Create
func (mmCreate *mMessagesRepositoryMockCreate) Expect(ctx context.Context, msgIn *model.MessageIn) *mMessagesRepositoryMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("MessagesRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &MessagesRepositoryMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.paramPtrs != nil {
		mmCreate.mock.t.Fatalf("MessagesRepositoryMock.Create mock is already set by ExpectParams functions")
	}

	mmCreate.defaultExpectation.params = &MessagesRepositoryMockCreateParams{ctx, msgIn}
	for _, e := range mmCreate.expectations {
		if minimock.Equal(e.params, mmCreate.defaultExpectation.params) {
			mmCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreate.defaultExpectation.params)
		}
	}

	return mmCreate
}

// ExpectCtxParam1 sets up expected param ctx for MessagesRepository.Create
func (mmCreate *mMessagesRepositoryMockCreate) ExpectCtxParam1(ctx context.Context) *mMessagesRepositoryMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("MessagesRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &MessagesRepositoryMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.params != nil {
		mmCreate.mock.t.Fatalf("MessagesRepositoryMock.Create mock is already set by Expect")
	}

	if mmCreate.defaultExpectation.paramPtrs == nil {
		mmCreate.defaultExpectation.paramPtrs = &MessagesRepositoryMockCreateParamPtrs{}
	}
	mmCreate.defaultExpectation.paramPtrs.ctx = &ctx

	return mmCreate
}

// ExpectMsgInParam2 sets up expected param msgIn for MessagesRepository.Create
func (mmCreate *mMessagesRepositoryMockCreate) ExpectMsgInParam2(msgIn *model.MessageIn) *mMessagesRepositoryMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("MessagesRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &MessagesRepositoryMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.params != nil {
		mmCreate.mock.t.Fatalf("MessagesRepositoryMock.Create mock is already set by Expect")
	}

	if mmCreate.defaultExpectation.paramPtrs == nil {
		mmCreate.defaultExpectation.paramPtrs = &MessagesRepositoryMockCreateParamPtrs{}
	}
	mmCreate.defaultExpectation.paramPtrs.msgIn = &msgIn

	return mmCreate
}

// Inspect accepts an inspector function that has same arguments as the MessagesRepository.Create
func (mmCreate *mMessagesRepositoryMockCreate) Inspect(f func(ctx context.Context, msgIn *model.MessageIn)) *mMessagesRepositoryMockCreate {
	if mmCreate.mock.inspectFuncCreate != nil {
		mmCreate.mock.t.Fatalf("Inspect function is already set for MessagesRepositoryMock.Create")
	}

	mmCreate.mock.inspectFuncCreate = f

	return mmCreate
}

// Return sets up results that will be returned by MessagesRepository.Create
func (mmCreate *mMessagesRepositoryMockCreate) Return(err error) *MessagesRepositoryMock {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("MessagesRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &MessagesRepositoryMockCreateExpectation{mock: mmCreate.mock}
	}
	mmCreate.defaultExpectation.results = &MessagesRepositoryMockCreateResults{err}
	return mmCreate.mock
}

// Set uses given function f to mock the MessagesRepository.Create method
func (mmCreate *mMessagesRepositoryMockCreate) Set(f func(ctx context.Context, msgIn *model.MessageIn) (err error)) *MessagesRepositoryMock {
	if mmCreate.defaultExpectation != nil {
		mmCreate.mock.t.Fatalf("Default expectation is already set for the MessagesRepository.Create method")
	}

	if len(mmCreate.expectations) > 0 {
		mmCreate.mock.t.Fatalf("Some expectations are already set for the MessagesRepository.Create method")
	}

	mmCreate.mock.funcCreate = f
	return mmCreate.mock
}

// When sets expectation for the MessagesRepository.Create which will trigger the result defined by the following
// Then helper
func (mmCreate *mMessagesRepositoryMockCreate) When(ctx context.Context, msgIn *model.MessageIn) *MessagesRepositoryMockCreateExpectation {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("MessagesRepositoryMock.Create mock is already set by Set")
	}

	expectation := &MessagesRepositoryMockCreateExpectation{
		mock:   mmCreate.mock,
		params: &MessagesRepositoryMockCreateParams{ctx, msgIn},
	}
	mmCreate.expectations = append(mmCreate.expectations, expectation)
	return expectation
}

// Then sets up MessagesRepository.Create return parameters for the expectation previously defined by the When method
func (e *MessagesRepositoryMockCreateExpectation) Then(err error) *MessagesRepositoryMock {
	e.results = &MessagesRepositoryMockCreateResults{err}
	return e.mock
}

// Times sets number of times MessagesRepository.Create should be invoked
func (mmCreate *mMessagesRepositoryMockCreate) Times(n uint64) *mMessagesRepositoryMockCreate {
	if n == 0 {
		mmCreate.mock.t.Fatalf("Times of MessagesRepositoryMock.Create mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreate.expectedInvocations, n)
	return mmCreate
}

func (mmCreate *mMessagesRepositoryMockCreate) invocationsDone() bool {
	if len(mmCreate.expectations) == 0 && mmCreate.defaultExpectation == nil && mmCreate.mock.funcCreate == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreate.mock.afterCreateCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreate.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Create implements repository.MessagesRepository
func (mmCreate *MessagesRepositoryMock) Create(ctx context.Context, msgIn *model.MessageIn) (err error) {
	mm_atomic.AddUint64(&mmCreate.beforeCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmCreate.afterCreateCounter, 1)

	if mmCreate.inspectFuncCreate != nil {
		mmCreate.inspectFuncCreate(ctx, msgIn)
	}

	mm_params := MessagesRepositoryMockCreateParams{ctx, msgIn}

	// Record call args
	mmCreate.CreateMock.mutex.Lock()
	mmCreate.CreateMock.callArgs = append(mmCreate.CreateMock.callArgs, &mm_params)
	mmCreate.CreateMock.mutex.Unlock()

	for _, e := range mmCreate.CreateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCreate.CreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreate.CreateMock.defaultExpectation.Counter, 1)
		mm_want := mmCreate.CreateMock.defaultExpectation.params
		mm_want_ptrs := mmCreate.CreateMock.defaultExpectation.paramPtrs

		mm_got := MessagesRepositoryMockCreateParams{ctx, msgIn}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreate.t.Errorf("MessagesRepositoryMock.Create got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.msgIn != nil && !minimock.Equal(*mm_want_ptrs.msgIn, mm_got.msgIn) {
				mmCreate.t.Errorf("MessagesRepositoryMock.Create got unexpected parameter msgIn, want: %#v, got: %#v%s\n", *mm_want_ptrs.msgIn, mm_got.msgIn, minimock.Diff(*mm_want_ptrs.msgIn, mm_got.msgIn))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreate.t.Errorf("MessagesRepositoryMock.Create got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreate.CreateMock.defaultExpectation.results
		if mm_results == nil {
			mmCreate.t.Fatal("No results are set for the MessagesRepositoryMock.Create")
		}
		return (*mm_results).err
	}
	if mmCreate.funcCreate != nil {
		return mmCreate.funcCreate(ctx, msgIn)
	}
	mmCreate.t.Fatalf("Unexpected call to MessagesRepositoryMock.Create. %v %v", ctx, msgIn)
	return
}

// CreateAfterCounter returns a count of finished MessagesRepositoryMock.Create invocations
func (mmCreate *MessagesRepositoryMock) CreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.afterCreateCounter)
}

// CreateBeforeCounter returns a count of MessagesRepositoryMock.Create invocations
func (mmCreate *MessagesRepositoryMock) CreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.beforeCreateCounter)
}

// Calls returns a list of arguments used in each call to MessagesRepositoryMock.Create.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreate *mMessagesRepositoryMockCreate) Calls() []*MessagesRepositoryMockCreateParams {
	mmCreate.mutex.RLock()

	argCopy := make([]*MessagesRepositoryMockCreateParams, len(mmCreate.callArgs))
	copy(argCopy, mmCreate.callArgs)

	mmCreate.mutex.RUnlock()

	return argCopy
}

// MinimockCreateDone returns true if the count of the Create invocations corresponds
// the number of defined expectations
func (m *MessagesRepositoryMock) MinimockCreateDone() bool {
	if m.CreateMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateMock.invocationsDone()
}

// MinimockCreateInspect logs each unmet expectation
func (m *MessagesRepositoryMock) MinimockCreateInspect() {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MessagesRepositoryMock.Create with params: %#v", *e.params)
		}
	}

	afterCreateCounter := mm_atomic.LoadUint64(&m.afterCreateCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && afterCreateCounter < 1 {
		if m.CreateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MessagesRepositoryMock.Create")
		} else {
			m.t.Errorf("Expected call to MessagesRepositoryMock.Create with params: %#v", *m.CreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && afterCreateCounter < 1 {
		m.t.Error("Expected call to MessagesRepositoryMock.Create")
	}

	if !m.CreateMock.invocationsDone() && afterCreateCounter > 0 {
		m.t.Errorf("Expected %d calls to MessagesRepositoryMock.Create but found %d calls",
			mm_atomic.LoadUint64(&m.CreateMock.expectedInvocations), afterCreateCounter)
	}
}

type mMessagesRepositoryMockDeleteByChatID struct {
	optional           bool
	mock               *MessagesRepositoryMock
	defaultExpectation *MessagesRepositoryMockDeleteByChatIDExpectation
	expectations       []*MessagesRepositoryMockDeleteByChatIDExpectation

	callArgs []*MessagesRepositoryMockDeleteByChatIDParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// MessagesRepositoryMockDeleteByChatIDExpectation specifies expectation struct of the MessagesRepository.DeleteByChatID
type MessagesRepositoryMockDeleteByChatIDExpectation struct {
	mock      *MessagesRepositoryMock
	params    *MessagesRepositoryMockDeleteByChatIDParams
	paramPtrs *MessagesRepositoryMockDeleteByChatIDParamPtrs
	results   *MessagesRepositoryMockDeleteByChatIDResults
	Counter   uint64
}

// MessagesRepositoryMockDeleteByChatIDParams contains parameters of the MessagesRepository.DeleteByChatID
type MessagesRepositoryMockDeleteByChatIDParams struct {
	ctx    context.Context
	chatID int64
}

// MessagesRepositoryMockDeleteByChatIDParamPtrs contains pointers to parameters of the MessagesRepository.DeleteByChatID
type MessagesRepositoryMockDeleteByChatIDParamPtrs struct {
	ctx    *context.Context
	chatID *int64
}

// MessagesRepositoryMockDeleteByChatIDResults contains results of the MessagesRepository.DeleteByChatID
type MessagesRepositoryMockDeleteByChatIDResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeleteByChatID *mMessagesRepositoryMockDeleteByChatID) Optional() *mMessagesRepositoryMockDeleteByChatID {
	mmDeleteByChatID.optional = true
	return mmDeleteByChatID
}

// Expect sets up expected params for MessagesRepository.DeleteByChatID
func (mmDeleteByChatID *mMessagesRepositoryMockDeleteByChatID) Expect(ctx context.Context, chatID int64) *mMessagesRepositoryMockDeleteByChatID {
	if mmDeleteByChatID.mock.funcDeleteByChatID != nil {
		mmDeleteByChatID.mock.t.Fatalf("MessagesRepositoryMock.DeleteByChatID mock is already set by Set")
	}

	if mmDeleteByChatID.defaultExpectation == nil {
		mmDeleteByChatID.defaultExpectation = &MessagesRepositoryMockDeleteByChatIDExpectation{}
	}

	if mmDeleteByChatID.defaultExpectation.paramPtrs != nil {
		mmDeleteByChatID.mock.t.Fatalf("MessagesRepositoryMock.DeleteByChatID mock is already set by ExpectParams functions")
	}

	mmDeleteByChatID.defaultExpectation.params = &MessagesRepositoryMockDeleteByChatIDParams{ctx, chatID}
	for _, e := range mmDeleteByChatID.expectations {
		if minimock.Equal(e.params, mmDeleteByChatID.defaultExpectation.params) {
			mmDeleteByChatID.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteByChatID.defaultExpectation.params)
		}
	}

	return mmDeleteByChatID
}

// ExpectCtxParam1 sets up expected param ctx for MessagesRepository.DeleteByChatID
func (mmDeleteByChatID *mMessagesRepositoryMockDeleteByChatID) ExpectCtxParam1(ctx context.Context) *mMessagesRepositoryMockDeleteByChatID {
	if mmDeleteByChatID.mock.funcDeleteByChatID != nil {
		mmDeleteByChatID.mock.t.Fatalf("MessagesRepositoryMock.DeleteByChatID mock is already set by Set")
	}

	if mmDeleteByChatID.defaultExpectation == nil {
		mmDeleteByChatID.defaultExpectation = &MessagesRepositoryMockDeleteByChatIDExpectation{}
	}

	if mmDeleteByChatID.defaultExpectation.params != nil {
		mmDeleteByChatID.mock.t.Fatalf("MessagesRepositoryMock.DeleteByChatID mock is already set by Expect")
	}

	if mmDeleteByChatID.defaultExpectation.paramPtrs == nil {
		mmDeleteByChatID.defaultExpectation.paramPtrs = &MessagesRepositoryMockDeleteByChatIDParamPtrs{}
	}
	mmDeleteByChatID.defaultExpectation.paramPtrs.ctx = &ctx

	return mmDeleteByChatID
}

// ExpectChatIDParam2 sets up expected param chatID for MessagesRepository.DeleteByChatID
func (mmDeleteByChatID *mMessagesRepositoryMockDeleteByChatID) ExpectChatIDParam2(chatID int64) *mMessagesRepositoryMockDeleteByChatID {
	if mmDeleteByChatID.mock.funcDeleteByChatID != nil {
		mmDeleteByChatID.mock.t.Fatalf("MessagesRepositoryMock.DeleteByChatID mock is already set by Set")
	}

	if mmDeleteByChatID.defaultExpectation == nil {
		mmDeleteByChatID.defaultExpectation = &MessagesRepositoryMockDeleteByChatIDExpectation{}
	}

	if mmDeleteByChatID.defaultExpectation.params != nil {
		mmDeleteByChatID.mock.t.Fatalf("MessagesRepositoryMock.DeleteByChatID mock is already set by Expect")
	}

	if mmDeleteByChatID.defaultExpectation.paramPtrs == nil {
		mmDeleteByChatID.defaultExpectation.paramPtrs = &MessagesRepositoryMockDeleteByChatIDParamPtrs{}
	}
	mmDeleteByChatID.defaultExpectation.paramPtrs.chatID = &chatID

	return mmDeleteByChatID
}

// Inspect accepts an inspector function that has same arguments as the MessagesRepository.DeleteByChatID
func (mmDeleteByChatID *mMessagesRepositoryMockDeleteByChatID) Inspect(f func(ctx context.Context, chatID int64)) *mMessagesRepositoryMockDeleteByChatID {
	if mmDeleteByChatID.mock.inspectFuncDeleteByChatID != nil {
		mmDeleteByChatID.mock.t.Fatalf("Inspect function is already set for MessagesRepositoryMock.DeleteByChatID")
	}

	mmDeleteByChatID.mock.inspectFuncDeleteByChatID = f

	return mmDeleteByChatID
}

// Return sets up results that will be returned by MessagesRepository.DeleteByChatID
func (mmDeleteByChatID *mMessagesRepositoryMockDeleteByChatID) Return(err error) *MessagesRepositoryMock {
	if mmDeleteByChatID.mock.funcDeleteByChatID != nil {
		mmDeleteByChatID.mock.t.Fatalf("MessagesRepositoryMock.DeleteByChatID mock is already set by Set")
	}

	if mmDeleteByChatID.defaultExpectation == nil {
		mmDeleteByChatID.defaultExpectation = &MessagesRepositoryMockDeleteByChatIDExpectation{mock: mmDeleteByChatID.mock}
	}
	mmDeleteByChatID.defaultExpectation.results = &MessagesRepositoryMockDeleteByChatIDResults{err}
	return mmDeleteByChatID.mock
}

// Set uses given function f to mock the MessagesRepository.DeleteByChatID method
func (mmDeleteByChatID *mMessagesRepositoryMockDeleteByChatID) Set(f func(ctx context.Context, chatID int64) (err error)) *MessagesRepositoryMock {
	if mmDeleteByChatID.defaultExpectation != nil {
		mmDeleteByChatID.mock.t.Fatalf("Default expectation is already set for the MessagesRepository.DeleteByChatID method")
	}

	if len(mmDeleteByChatID.expectations) > 0 {
		mmDeleteByChatID.mock.t.Fatalf("Some expectations are already set for the MessagesRepository.DeleteByChatID method")
	}

	mmDeleteByChatID.mock.funcDeleteByChatID = f
	return mmDeleteByChatID.mock
}

// When sets expectation for the MessagesRepository.DeleteByChatID which will trigger the result defined by the following
// Then helper
func (mmDeleteByChatID *mMessagesRepositoryMockDeleteByChatID) When(ctx context.Context, chatID int64) *MessagesRepositoryMockDeleteByChatIDExpectation {
	if mmDeleteByChatID.mock.funcDeleteByChatID != nil {
		mmDeleteByChatID.mock.t.Fatalf("MessagesRepositoryMock.DeleteByChatID mock is already set by Set")
	}

	expectation := &MessagesRepositoryMockDeleteByChatIDExpectation{
		mock:   mmDeleteByChatID.mock,
		params: &MessagesRepositoryMockDeleteByChatIDParams{ctx, chatID},
	}
	mmDeleteByChatID.expectations = append(mmDeleteByChatID.expectations, expectation)
	return expectation
}

// Then sets up MessagesRepository.DeleteByChatID return parameters for the expectation previously defined by the When method
func (e *MessagesRepositoryMockDeleteByChatIDExpectation) Then(err error) *MessagesRepositoryMock {
	e.results = &MessagesRepositoryMockDeleteByChatIDResults{err}
	return e.mock
}

// Times sets number of times MessagesRepository.DeleteByChatID should be invoked
func (mmDeleteByChatID *mMessagesRepositoryMockDeleteByChatID) Times(n uint64) *mMessagesRepositoryMockDeleteByChatID {
	if n == 0 {
		mmDeleteByChatID.mock.t.Fatalf("Times of MessagesRepositoryMock.DeleteByChatID mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeleteByChatID.expectedInvocations, n)
	return mmDeleteByChatID
}

func (mmDeleteByChatID *mMessagesRepositoryMockDeleteByChatID) invocationsDone() bool {
	if len(mmDeleteByChatID.expectations) == 0 && mmDeleteByChatID.defaultExpectation == nil && mmDeleteByChatID.mock.funcDeleteByChatID == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeleteByChatID.mock.afterDeleteByChatIDCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeleteByChatID.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DeleteByChatID implements repository.MessagesRepository
func (mmDeleteByChatID *MessagesRepositoryMock) DeleteByChatID(ctx context.Context, chatID int64) (err error) {
	mm_atomic.AddUint64(&mmDeleteByChatID.beforeDeleteByChatIDCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteByChatID.afterDeleteByChatIDCounter, 1)

	if mmDeleteByChatID.inspectFuncDeleteByChatID != nil {
		mmDeleteByChatID.inspectFuncDeleteByChatID(ctx, chatID)
	}

	mm_params := MessagesRepositoryMockDeleteByChatIDParams{ctx, chatID}

	// Record call args
	mmDeleteByChatID.DeleteByChatIDMock.mutex.Lock()
	mmDeleteByChatID.DeleteByChatIDMock.callArgs = append(mmDeleteByChatID.DeleteByChatIDMock.callArgs, &mm_params)
	mmDeleteByChatID.DeleteByChatIDMock.mutex.Unlock()

	for _, e := range mmDeleteByChatID.DeleteByChatIDMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDeleteByChatID.DeleteByChatIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteByChatID.DeleteByChatIDMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteByChatID.DeleteByChatIDMock.defaultExpectation.params
		mm_want_ptrs := mmDeleteByChatID.DeleteByChatIDMock.defaultExpectation.paramPtrs

		mm_got := MessagesRepositoryMockDeleteByChatIDParams{ctx, chatID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDeleteByChatID.t.Errorf("MessagesRepositoryMock.DeleteByChatID got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.chatID != nil && !minimock.Equal(*mm_want_ptrs.chatID, mm_got.chatID) {
				mmDeleteByChatID.t.Errorf("MessagesRepositoryMock.DeleteByChatID got unexpected parameter chatID, want: %#v, got: %#v%s\n", *mm_want_ptrs.chatID, mm_got.chatID, minimock.Diff(*mm_want_ptrs.chatID, mm_got.chatID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteByChatID.t.Errorf("MessagesRepositoryMock.DeleteByChatID got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteByChatID.DeleteByChatIDMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteByChatID.t.Fatal("No results are set for the MessagesRepositoryMock.DeleteByChatID")
		}
		return (*mm_results).err
	}
	if mmDeleteByChatID.funcDeleteByChatID != nil {
		return mmDeleteByChatID.funcDeleteByChatID(ctx, chatID)
	}
	mmDeleteByChatID.t.Fatalf("Unexpected call to MessagesRepositoryMock.DeleteByChatID. %v %v", ctx, chatID)
	return
}

// DeleteByChatIDAfterCounter returns a count of finished MessagesRepositoryMock.DeleteByChatID invocations
func (mmDeleteByChatID *MessagesRepositoryMock) DeleteByChatIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteByChatID.afterDeleteByChatIDCounter)
}

// DeleteByChatIDBeforeCounter returns a count of MessagesRepositoryMock.DeleteByChatID invocations
func (mmDeleteByChatID *MessagesRepositoryMock) DeleteByChatIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteByChatID.beforeDeleteByChatIDCounter)
}

// Calls returns a list of arguments used in each call to MessagesRepositoryMock.DeleteByChatID.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteByChatID *mMessagesRepositoryMockDeleteByChatID) Calls() []*MessagesRepositoryMockDeleteByChatIDParams {
	mmDeleteByChatID.mutex.RLock()

	argCopy := make([]*MessagesRepositoryMockDeleteByChatIDParams, len(mmDeleteByChatID.callArgs))
	copy(argCopy, mmDeleteByChatID.callArgs)

	mmDeleteByChatID.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteByChatIDDone returns true if the count of the DeleteByChatID invocations corresponds
// the number of defined expectations
func (m *MessagesRepositoryMock) MinimockDeleteByChatIDDone() bool {
	if m.DeleteByChatIDMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteByChatIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteByChatIDMock.invocationsDone()
}

// MinimockDeleteByChatIDInspect logs each unmet expectation
func (m *MessagesRepositoryMock) MinimockDeleteByChatIDInspect() {
	for _, e := range m.DeleteByChatIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MessagesRepositoryMock.DeleteByChatID with params: %#v", *e.params)
		}
	}

	afterDeleteByChatIDCounter := mm_atomic.LoadUint64(&m.afterDeleteByChatIDCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteByChatIDMock.defaultExpectation != nil && afterDeleteByChatIDCounter < 1 {
		if m.DeleteByChatIDMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MessagesRepositoryMock.DeleteByChatID")
		} else {
			m.t.Errorf("Expected call to MessagesRepositoryMock.DeleteByChatID with params: %#v", *m.DeleteByChatIDMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteByChatID != nil && afterDeleteByChatIDCounter < 1 {
		m.t.Error("Expected call to MessagesRepositoryMock.DeleteByChatID")
	}

	if !m.DeleteByChatIDMock.invocationsDone() && afterDeleteByChatIDCounter > 0 {
		m.t.Errorf("Expected %d calls to MessagesRepositoryMock.DeleteByChatID but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteByChatIDMock.expectedInvocations), afterDeleteByChatIDCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *MessagesRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateInspect()

			m.MinimockDeleteByChatIDInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *MessagesRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *MessagesRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateDone() &&
		m.MinimockDeleteByChatIDDone()
}
