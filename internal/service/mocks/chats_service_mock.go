// Code generated by http://github.com/gojuno/minimock (v3.3.14). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/ukrainskykirill/chat-server/internal/service.ChatsService -o chats_service_mock_test.go -n ChatsServiceMock -p service

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"

	"github.com/ukrainskykirill/chat-server/internal/model"
)

// ChatsServiceMock implements ChatsService
type ChatsServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcConnectChat          func(connectInfo *model.ConnectInfo) (err error)
	inspectFuncConnectChat   func(connectInfo *model.ConnectInfo)
	afterConnectChatCounter  uint64
	beforeConnectChatCounter uint64
	ConnectChatMock          mChatsServiceMockConnectChat

	funcCreate          func(ctx context.Context, userIDs []int64) (i1 int64, err error)
	inspectFuncCreate   func(ctx context.Context, userIDs []int64)
	afterCreateCounter  uint64
	beforeCreateCounter uint64
	CreateMock          mChatsServiceMockCreate

	funcDelete          func(ctx context.Context, chatID int64) (err error)
	inspectFuncDelete   func(ctx context.Context, chatID int64)
	afterDeleteCounter  uint64
	beforeDeleteCounter uint64
	DeleteMock          mChatsServiceMockDelete
}

// NewChatsServiceMock returns a mock for ChatsService
func NewChatsServiceMock(t minimock.Tester) *ChatsServiceMock {
	m := &ChatsServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ConnectChatMock = mChatsServiceMockConnectChat{mock: m}
	m.ConnectChatMock.callArgs = []*ChatsServiceMockConnectChatParams{}

	m.CreateMock = mChatsServiceMockCreate{mock: m}
	m.CreateMock.callArgs = []*ChatsServiceMockCreateParams{}

	m.DeleteMock = mChatsServiceMockDelete{mock: m}
	m.DeleteMock.callArgs = []*ChatsServiceMockDeleteParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mChatsServiceMockConnectChat struct {
	optional           bool
	mock               *ChatsServiceMock
	defaultExpectation *ChatsServiceMockConnectChatExpectation
	expectations       []*ChatsServiceMockConnectChatExpectation

	callArgs []*ChatsServiceMockConnectChatParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// ChatsServiceMockConnectChatExpectation specifies expectation struct of the ChatsService.ConnectChat
type ChatsServiceMockConnectChatExpectation struct {
	mock      *ChatsServiceMock
	params    *ChatsServiceMockConnectChatParams
	paramPtrs *ChatsServiceMockConnectChatParamPtrs
	results   *ChatsServiceMockConnectChatResults
	Counter   uint64
}

// ChatsServiceMockConnectChatParams contains parameters of the ChatsService.ConnectChat
type ChatsServiceMockConnectChatParams struct {
	connectInfo *model.ConnectInfo
}

// ChatsServiceMockConnectChatParamPtrs contains pointers to parameters of the ChatsService.ConnectChat
type ChatsServiceMockConnectChatParamPtrs struct {
	connectInfo **model.ConnectInfo
}

// ChatsServiceMockConnectChatResults contains results of the ChatsService.ConnectChat
type ChatsServiceMockConnectChatResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmConnectChat *mChatsServiceMockConnectChat) Optional() *mChatsServiceMockConnectChat {
	mmConnectChat.optional = true
	return mmConnectChat
}

// Expect sets up expected params for ChatsService.ConnectChat
func (mmConnectChat *mChatsServiceMockConnectChat) Expect(connectInfo *model.ConnectInfo) *mChatsServiceMockConnectChat {
	if mmConnectChat.mock.funcConnectChat != nil {
		mmConnectChat.mock.t.Fatalf("ChatsServiceMock.ConnectChat mock is already set by Set")
	}

	if mmConnectChat.defaultExpectation == nil {
		mmConnectChat.defaultExpectation = &ChatsServiceMockConnectChatExpectation{}
	}

	if mmConnectChat.defaultExpectation.paramPtrs != nil {
		mmConnectChat.mock.t.Fatalf("ChatsServiceMock.ConnectChat mock is already set by ExpectParams functions")
	}

	mmConnectChat.defaultExpectation.params = &ChatsServiceMockConnectChatParams{connectInfo}
	for _, e := range mmConnectChat.expectations {
		if minimock.Equal(e.params, mmConnectChat.defaultExpectation.params) {
			mmConnectChat.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmConnectChat.defaultExpectation.params)
		}
	}

	return mmConnectChat
}

// ExpectConnectInfoParam1 sets up expected param connectInfo for ChatsService.ConnectChat
func (mmConnectChat *mChatsServiceMockConnectChat) ExpectConnectInfoParam1(connectInfo *model.ConnectInfo) *mChatsServiceMockConnectChat {
	if mmConnectChat.mock.funcConnectChat != nil {
		mmConnectChat.mock.t.Fatalf("ChatsServiceMock.ConnectChat mock is already set by Set")
	}

	if mmConnectChat.defaultExpectation == nil {
		mmConnectChat.defaultExpectation = &ChatsServiceMockConnectChatExpectation{}
	}

	if mmConnectChat.defaultExpectation.params != nil {
		mmConnectChat.mock.t.Fatalf("ChatsServiceMock.ConnectChat mock is already set by Expect")
	}

	if mmConnectChat.defaultExpectation.paramPtrs == nil {
		mmConnectChat.defaultExpectation.paramPtrs = &ChatsServiceMockConnectChatParamPtrs{}
	}
	mmConnectChat.defaultExpectation.paramPtrs.connectInfo = &connectInfo

	return mmConnectChat
}

// Inspect accepts an inspector function that has same arguments as the ChatsService.ConnectChat
func (mmConnectChat *mChatsServiceMockConnectChat) Inspect(f func(connectInfo *model.ConnectInfo)) *mChatsServiceMockConnectChat {
	if mmConnectChat.mock.inspectFuncConnectChat != nil {
		mmConnectChat.mock.t.Fatalf("Inspect function is already set for ChatsServiceMock.ConnectChat")
	}

	mmConnectChat.mock.inspectFuncConnectChat = f

	return mmConnectChat
}

// Return sets up results that will be returned by ChatsService.ConnectChat
func (mmConnectChat *mChatsServiceMockConnectChat) Return(err error) *ChatsServiceMock {
	if mmConnectChat.mock.funcConnectChat != nil {
		mmConnectChat.mock.t.Fatalf("ChatsServiceMock.ConnectChat mock is already set by Set")
	}

	if mmConnectChat.defaultExpectation == nil {
		mmConnectChat.defaultExpectation = &ChatsServiceMockConnectChatExpectation{mock: mmConnectChat.mock}
	}
	mmConnectChat.defaultExpectation.results = &ChatsServiceMockConnectChatResults{err}
	return mmConnectChat.mock
}

// Set uses given function f to mock the ChatsService.ConnectChat method
func (mmConnectChat *mChatsServiceMockConnectChat) Set(f func(connectInfo *model.ConnectInfo) (err error)) *ChatsServiceMock {
	if mmConnectChat.defaultExpectation != nil {
		mmConnectChat.mock.t.Fatalf("Default expectation is already set for the ChatsService.ConnectChat method")
	}

	if len(mmConnectChat.expectations) > 0 {
		mmConnectChat.mock.t.Fatalf("Some expectations are already set for the ChatsService.ConnectChat method")
	}

	mmConnectChat.mock.funcConnectChat = f
	return mmConnectChat.mock
}

// When sets expectation for the ChatsService.ConnectChat which will trigger the result defined by the following
// Then helper
func (mmConnectChat *mChatsServiceMockConnectChat) When(connectInfo *model.ConnectInfo) *ChatsServiceMockConnectChatExpectation {
	if mmConnectChat.mock.funcConnectChat != nil {
		mmConnectChat.mock.t.Fatalf("ChatsServiceMock.ConnectChat mock is already set by Set")
	}

	expectation := &ChatsServiceMockConnectChatExpectation{
		mock:   mmConnectChat.mock,
		params: &ChatsServiceMockConnectChatParams{connectInfo},
	}
	mmConnectChat.expectations = append(mmConnectChat.expectations, expectation)
	return expectation
}

// Then sets up ChatsService.ConnectChat return parameters for the expectation previously defined by the When method
func (e *ChatsServiceMockConnectChatExpectation) Then(err error) *ChatsServiceMock {
	e.results = &ChatsServiceMockConnectChatResults{err}
	return e.mock
}

// Times sets number of times ChatsService.ConnectChat should be invoked
func (mmConnectChat *mChatsServiceMockConnectChat) Times(n uint64) *mChatsServiceMockConnectChat {
	if n == 0 {
		mmConnectChat.mock.t.Fatalf("Times of ChatsServiceMock.ConnectChat mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmConnectChat.expectedInvocations, n)
	return mmConnectChat
}

func (mmConnectChat *mChatsServiceMockConnectChat) invocationsDone() bool {
	if len(mmConnectChat.expectations) == 0 && mmConnectChat.defaultExpectation == nil && mmConnectChat.mock.funcConnectChat == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmConnectChat.mock.afterConnectChatCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmConnectChat.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ConnectChat implements ChatsService
func (mmConnectChat *ChatsServiceMock) ConnectChat(connectInfo *model.ConnectInfo) (err error) {
	mm_atomic.AddUint64(&mmConnectChat.beforeConnectChatCounter, 1)
	defer mm_atomic.AddUint64(&mmConnectChat.afterConnectChatCounter, 1)

	if mmConnectChat.inspectFuncConnectChat != nil {
		mmConnectChat.inspectFuncConnectChat(connectInfo)
	}

	mm_params := ChatsServiceMockConnectChatParams{connectInfo}

	// Record call args
	mmConnectChat.ConnectChatMock.mutex.Lock()
	mmConnectChat.ConnectChatMock.callArgs = append(mmConnectChat.ConnectChatMock.callArgs, &mm_params)
	mmConnectChat.ConnectChatMock.mutex.Unlock()

	for _, e := range mmConnectChat.ConnectChatMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmConnectChat.ConnectChatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmConnectChat.ConnectChatMock.defaultExpectation.Counter, 1)
		mm_want := mmConnectChat.ConnectChatMock.defaultExpectation.params
		mm_want_ptrs := mmConnectChat.ConnectChatMock.defaultExpectation.paramPtrs

		mm_got := ChatsServiceMockConnectChatParams{connectInfo}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.connectInfo != nil && !minimock.Equal(*mm_want_ptrs.connectInfo, mm_got.connectInfo) {
				mmConnectChat.t.Errorf("ChatsServiceMock.ConnectChat got unexpected parameter connectInfo, want: %#v, got: %#v%s\n", *mm_want_ptrs.connectInfo, mm_got.connectInfo, minimock.Diff(*mm_want_ptrs.connectInfo, mm_got.connectInfo))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmConnectChat.t.Errorf("ChatsServiceMock.ConnectChat got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmConnectChat.ConnectChatMock.defaultExpectation.results
		if mm_results == nil {
			mmConnectChat.t.Fatal("No results are set for the ChatsServiceMock.ConnectChat")
		}
		return (*mm_results).err
	}
	if mmConnectChat.funcConnectChat != nil {
		return mmConnectChat.funcConnectChat(connectInfo)
	}
	mmConnectChat.t.Fatalf("Unexpected call to ChatsServiceMock.ConnectChat. %v", connectInfo)
	return
}

// ConnectChatAfterCounter returns a count of finished ChatsServiceMock.ConnectChat invocations
func (mmConnectChat *ChatsServiceMock) ConnectChatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmConnectChat.afterConnectChatCounter)
}

// ConnectChatBeforeCounter returns a count of ChatsServiceMock.ConnectChat invocations
func (mmConnectChat *ChatsServiceMock) ConnectChatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmConnectChat.beforeConnectChatCounter)
}

// Calls returns a list of arguments used in each call to ChatsServiceMock.ConnectChat.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmConnectChat *mChatsServiceMockConnectChat) Calls() []*ChatsServiceMockConnectChatParams {
	mmConnectChat.mutex.RLock()

	argCopy := make([]*ChatsServiceMockConnectChatParams, len(mmConnectChat.callArgs))
	copy(argCopy, mmConnectChat.callArgs)

	mmConnectChat.mutex.RUnlock()

	return argCopy
}

// MinimockConnectChatDone returns true if the count of the ConnectChat invocations corresponds
// the number of defined expectations
func (m *ChatsServiceMock) MinimockConnectChatDone() bool {
	if m.ConnectChatMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ConnectChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ConnectChatMock.invocationsDone()
}

// MinimockConnectChatInspect logs each unmet expectation
func (m *ChatsServiceMock) MinimockConnectChatInspect() {
	for _, e := range m.ConnectChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatsServiceMock.ConnectChat with params: %#v", *e.params)
		}
	}

	afterConnectChatCounter := mm_atomic.LoadUint64(&m.afterConnectChatCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ConnectChatMock.defaultExpectation != nil && afterConnectChatCounter < 1 {
		if m.ConnectChatMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ChatsServiceMock.ConnectChat")
		} else {
			m.t.Errorf("Expected call to ChatsServiceMock.ConnectChat with params: %#v", *m.ConnectChatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcConnectChat != nil && afterConnectChatCounter < 1 {
		m.t.Error("Expected call to ChatsServiceMock.ConnectChat")
	}

	if !m.ConnectChatMock.invocationsDone() && afterConnectChatCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatsServiceMock.ConnectChat but found %d calls",
			mm_atomic.LoadUint64(&m.ConnectChatMock.expectedInvocations), afterConnectChatCounter)
	}
}

type mChatsServiceMockCreate struct {
	optional           bool
	mock               *ChatsServiceMock
	defaultExpectation *ChatsServiceMockCreateExpectation
	expectations       []*ChatsServiceMockCreateExpectation

	callArgs []*ChatsServiceMockCreateParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// ChatsServiceMockCreateExpectation specifies expectation struct of the ChatsService.Create
type ChatsServiceMockCreateExpectation struct {
	mock      *ChatsServiceMock
	params    *ChatsServiceMockCreateParams
	paramPtrs *ChatsServiceMockCreateParamPtrs
	results   *ChatsServiceMockCreateResults
	Counter   uint64
}

// ChatsServiceMockCreateParams contains parameters of the ChatsService.Create
type ChatsServiceMockCreateParams struct {
	ctx     context.Context
	userIDs []int64
}

// ChatsServiceMockCreateParamPtrs contains pointers to parameters of the ChatsService.Create
type ChatsServiceMockCreateParamPtrs struct {
	ctx     *context.Context
	userIDs *[]int64
}

// ChatsServiceMockCreateResults contains results of the ChatsService.Create
type ChatsServiceMockCreateResults struct {
	i1  int64
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreate *mChatsServiceMockCreate) Optional() *mChatsServiceMockCreate {
	mmCreate.optional = true
	return mmCreate
}

// Expect sets up expected params for ChatsService.Create
func (mmCreate *mChatsServiceMockCreate) Expect(ctx context.Context, userIDs []int64) *mChatsServiceMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("ChatsServiceMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &ChatsServiceMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.paramPtrs != nil {
		mmCreate.mock.t.Fatalf("ChatsServiceMock.Create mock is already set by ExpectParams functions")
	}

	mmCreate.defaultExpectation.params = &ChatsServiceMockCreateParams{ctx, userIDs}
	for _, e := range mmCreate.expectations {
		if minimock.Equal(e.params, mmCreate.defaultExpectation.params) {
			mmCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreate.defaultExpectation.params)
		}
	}

	return mmCreate
}

// ExpectCtxParam1 sets up expected param ctx for ChatsService.Create
func (mmCreate *mChatsServiceMockCreate) ExpectCtxParam1(ctx context.Context) *mChatsServiceMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("ChatsServiceMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &ChatsServiceMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.params != nil {
		mmCreate.mock.t.Fatalf("ChatsServiceMock.Create mock is already set by Expect")
	}

	if mmCreate.defaultExpectation.paramPtrs == nil {
		mmCreate.defaultExpectation.paramPtrs = &ChatsServiceMockCreateParamPtrs{}
	}
	mmCreate.defaultExpectation.paramPtrs.ctx = &ctx

	return mmCreate
}

// ExpectUserIDsParam2 sets up expected param userIDs for ChatsService.Create
func (mmCreate *mChatsServiceMockCreate) ExpectUserIDsParam2(userIDs []int64) *mChatsServiceMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("ChatsServiceMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &ChatsServiceMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.params != nil {
		mmCreate.mock.t.Fatalf("ChatsServiceMock.Create mock is already set by Expect")
	}

	if mmCreate.defaultExpectation.paramPtrs == nil {
		mmCreate.defaultExpectation.paramPtrs = &ChatsServiceMockCreateParamPtrs{}
	}
	mmCreate.defaultExpectation.paramPtrs.userIDs = &userIDs

	return mmCreate
}

// Inspect accepts an inspector function that has same arguments as the ChatsService.Create
func (mmCreate *mChatsServiceMockCreate) Inspect(f func(ctx context.Context, userIDs []int64)) *mChatsServiceMockCreate {
	if mmCreate.mock.inspectFuncCreate != nil {
		mmCreate.mock.t.Fatalf("Inspect function is already set for ChatsServiceMock.Create")
	}

	mmCreate.mock.inspectFuncCreate = f

	return mmCreate
}

// Return sets up results that will be returned by ChatsService.Create
func (mmCreate *mChatsServiceMockCreate) Return(i1 int64, err error) *ChatsServiceMock {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("ChatsServiceMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &ChatsServiceMockCreateExpectation{mock: mmCreate.mock}
	}
	mmCreate.defaultExpectation.results = &ChatsServiceMockCreateResults{i1, err}
	return mmCreate.mock
}

// Set uses given function f to mock the ChatsService.Create method
func (mmCreate *mChatsServiceMockCreate) Set(f func(ctx context.Context, userIDs []int64) (i1 int64, err error)) *ChatsServiceMock {
	if mmCreate.defaultExpectation != nil {
		mmCreate.mock.t.Fatalf("Default expectation is already set for the ChatsService.Create method")
	}

	if len(mmCreate.expectations) > 0 {
		mmCreate.mock.t.Fatalf("Some expectations are already set for the ChatsService.Create method")
	}

	mmCreate.mock.funcCreate = f
	return mmCreate.mock
}

// When sets expectation for the ChatsService.Create which will trigger the result defined by the following
// Then helper
func (mmCreate *mChatsServiceMockCreate) When(ctx context.Context, userIDs []int64) *ChatsServiceMockCreateExpectation {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("ChatsServiceMock.Create mock is already set by Set")
	}

	expectation := &ChatsServiceMockCreateExpectation{
		mock:   mmCreate.mock,
		params: &ChatsServiceMockCreateParams{ctx, userIDs},
	}
	mmCreate.expectations = append(mmCreate.expectations, expectation)
	return expectation
}

// Then sets up ChatsService.Create return parameters for the expectation previously defined by the When method
func (e *ChatsServiceMockCreateExpectation) Then(i1 int64, err error) *ChatsServiceMock {
	e.results = &ChatsServiceMockCreateResults{i1, err}
	return e.mock
}

// Times sets number of times ChatsService.Create should be invoked
func (mmCreate *mChatsServiceMockCreate) Times(n uint64) *mChatsServiceMockCreate {
	if n == 0 {
		mmCreate.mock.t.Fatalf("Times of ChatsServiceMock.Create mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreate.expectedInvocations, n)
	return mmCreate
}

func (mmCreate *mChatsServiceMockCreate) invocationsDone() bool {
	if len(mmCreate.expectations) == 0 && mmCreate.defaultExpectation == nil && mmCreate.mock.funcCreate == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreate.mock.afterCreateCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreate.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Create implements ChatsService
func (mmCreate *ChatsServiceMock) Create(ctx context.Context, userIDs []int64) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmCreate.beforeCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmCreate.afterCreateCounter, 1)

	if mmCreate.inspectFuncCreate != nil {
		mmCreate.inspectFuncCreate(ctx, userIDs)
	}

	mm_params := ChatsServiceMockCreateParams{ctx, userIDs}

	// Record call args
	mmCreate.CreateMock.mutex.Lock()
	mmCreate.CreateMock.callArgs = append(mmCreate.CreateMock.callArgs, &mm_params)
	mmCreate.CreateMock.mutex.Unlock()

	for _, e := range mmCreate.CreateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreate.CreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreate.CreateMock.defaultExpectation.Counter, 1)
		mm_want := mmCreate.CreateMock.defaultExpectation.params
		mm_want_ptrs := mmCreate.CreateMock.defaultExpectation.paramPtrs

		mm_got := ChatsServiceMockCreateParams{ctx, userIDs}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreate.t.Errorf("ChatsServiceMock.Create got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.userIDs != nil && !minimock.Equal(*mm_want_ptrs.userIDs, mm_got.userIDs) {
				mmCreate.t.Errorf("ChatsServiceMock.Create got unexpected parameter userIDs, want: %#v, got: %#v%s\n", *mm_want_ptrs.userIDs, mm_got.userIDs, minimock.Diff(*mm_want_ptrs.userIDs, mm_got.userIDs))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreate.t.Errorf("ChatsServiceMock.Create got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreate.CreateMock.defaultExpectation.results
		if mm_results == nil {
			mmCreate.t.Fatal("No results are set for the ChatsServiceMock.Create")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreate.funcCreate != nil {
		return mmCreate.funcCreate(ctx, userIDs)
	}
	mmCreate.t.Fatalf("Unexpected call to ChatsServiceMock.Create. %v %v", ctx, userIDs)
	return
}

// CreateAfterCounter returns a count of finished ChatsServiceMock.Create invocations
func (mmCreate *ChatsServiceMock) CreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.afterCreateCounter)
}

// CreateBeforeCounter returns a count of ChatsServiceMock.Create invocations
func (mmCreate *ChatsServiceMock) CreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.beforeCreateCounter)
}

// Calls returns a list of arguments used in each call to ChatsServiceMock.Create.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreate *mChatsServiceMockCreate) Calls() []*ChatsServiceMockCreateParams {
	mmCreate.mutex.RLock()

	argCopy := make([]*ChatsServiceMockCreateParams, len(mmCreate.callArgs))
	copy(argCopy, mmCreate.callArgs)

	mmCreate.mutex.RUnlock()

	return argCopy
}

// MinimockCreateDone returns true if the count of the Create invocations corresponds
// the number of defined expectations
func (m *ChatsServiceMock) MinimockCreateDone() bool {
	if m.CreateMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateMock.invocationsDone()
}

// MinimockCreateInspect logs each unmet expectation
func (m *ChatsServiceMock) MinimockCreateInspect() {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatsServiceMock.Create with params: %#v", *e.params)
		}
	}

	afterCreateCounter := mm_atomic.LoadUint64(&m.afterCreateCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && afterCreateCounter < 1 {
		if m.CreateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ChatsServiceMock.Create")
		} else {
			m.t.Errorf("Expected call to ChatsServiceMock.Create with params: %#v", *m.CreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && afterCreateCounter < 1 {
		m.t.Error("Expected call to ChatsServiceMock.Create")
	}

	if !m.CreateMock.invocationsDone() && afterCreateCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatsServiceMock.Create but found %d calls",
			mm_atomic.LoadUint64(&m.CreateMock.expectedInvocations), afterCreateCounter)
	}
}

type mChatsServiceMockDelete struct {
	optional           bool
	mock               *ChatsServiceMock
	defaultExpectation *ChatsServiceMockDeleteExpectation
	expectations       []*ChatsServiceMockDeleteExpectation

	callArgs []*ChatsServiceMockDeleteParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// ChatsServiceMockDeleteExpectation specifies expectation struct of the ChatsService.Delete
type ChatsServiceMockDeleteExpectation struct {
	mock      *ChatsServiceMock
	params    *ChatsServiceMockDeleteParams
	paramPtrs *ChatsServiceMockDeleteParamPtrs
	results   *ChatsServiceMockDeleteResults
	Counter   uint64
}

// ChatsServiceMockDeleteParams contains parameters of the ChatsService.Delete
type ChatsServiceMockDeleteParams struct {
	ctx    context.Context
	chatID int64
}

// ChatsServiceMockDeleteParamPtrs contains pointers to parameters of the ChatsService.Delete
type ChatsServiceMockDeleteParamPtrs struct {
	ctx    *context.Context
	chatID *int64
}

// ChatsServiceMockDeleteResults contains results of the ChatsService.Delete
type ChatsServiceMockDeleteResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDelete *mChatsServiceMockDelete) Optional() *mChatsServiceMockDelete {
	mmDelete.optional = true
	return mmDelete
}

// Expect sets up expected params for ChatsService.Delete
func (mmDelete *mChatsServiceMockDelete) Expect(ctx context.Context, chatID int64) *mChatsServiceMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("ChatsServiceMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &ChatsServiceMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.paramPtrs != nil {
		mmDelete.mock.t.Fatalf("ChatsServiceMock.Delete mock is already set by ExpectParams functions")
	}

	mmDelete.defaultExpectation.params = &ChatsServiceMockDeleteParams{ctx, chatID}
	for _, e := range mmDelete.expectations {
		if minimock.Equal(e.params, mmDelete.defaultExpectation.params) {
			mmDelete.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDelete.defaultExpectation.params)
		}
	}

	return mmDelete
}

// ExpectCtxParam1 sets up expected param ctx for ChatsService.Delete
func (mmDelete *mChatsServiceMockDelete) ExpectCtxParam1(ctx context.Context) *mChatsServiceMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("ChatsServiceMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &ChatsServiceMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.params != nil {
		mmDelete.mock.t.Fatalf("ChatsServiceMock.Delete mock is already set by Expect")
	}

	if mmDelete.defaultExpectation.paramPtrs == nil {
		mmDelete.defaultExpectation.paramPtrs = &ChatsServiceMockDeleteParamPtrs{}
	}
	mmDelete.defaultExpectation.paramPtrs.ctx = &ctx

	return mmDelete
}

// ExpectChatIDParam2 sets up expected param chatID for ChatsService.Delete
func (mmDelete *mChatsServiceMockDelete) ExpectChatIDParam2(chatID int64) *mChatsServiceMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("ChatsServiceMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &ChatsServiceMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.params != nil {
		mmDelete.mock.t.Fatalf("ChatsServiceMock.Delete mock is already set by Expect")
	}

	if mmDelete.defaultExpectation.paramPtrs == nil {
		mmDelete.defaultExpectation.paramPtrs = &ChatsServiceMockDeleteParamPtrs{}
	}
	mmDelete.defaultExpectation.paramPtrs.chatID = &chatID

	return mmDelete
}

// Inspect accepts an inspector function that has same arguments as the ChatsService.Delete
func (mmDelete *mChatsServiceMockDelete) Inspect(f func(ctx context.Context, chatID int64)) *mChatsServiceMockDelete {
	if mmDelete.mock.inspectFuncDelete != nil {
		mmDelete.mock.t.Fatalf("Inspect function is already set for ChatsServiceMock.Delete")
	}

	mmDelete.mock.inspectFuncDelete = f

	return mmDelete
}

// Return sets up results that will be returned by ChatsService.Delete
func (mmDelete *mChatsServiceMockDelete) Return(err error) *ChatsServiceMock {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("ChatsServiceMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &ChatsServiceMockDeleteExpectation{mock: mmDelete.mock}
	}
	mmDelete.defaultExpectation.results = &ChatsServiceMockDeleteResults{err}
	return mmDelete.mock
}

// Set uses given function f to mock the ChatsService.Delete method
func (mmDelete *mChatsServiceMockDelete) Set(f func(ctx context.Context, chatID int64) (err error)) *ChatsServiceMock {
	if mmDelete.defaultExpectation != nil {
		mmDelete.mock.t.Fatalf("Default expectation is already set for the ChatsService.Delete method")
	}

	if len(mmDelete.expectations) > 0 {
		mmDelete.mock.t.Fatalf("Some expectations are already set for the ChatsService.Delete method")
	}

	mmDelete.mock.funcDelete = f
	return mmDelete.mock
}

// When sets expectation for the ChatsService.Delete which will trigger the result defined by the following
// Then helper
func (mmDelete *mChatsServiceMockDelete) When(ctx context.Context, chatID int64) *ChatsServiceMockDeleteExpectation {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("ChatsServiceMock.Delete mock is already set by Set")
	}

	expectation := &ChatsServiceMockDeleteExpectation{
		mock:   mmDelete.mock,
		params: &ChatsServiceMockDeleteParams{ctx, chatID},
	}
	mmDelete.expectations = append(mmDelete.expectations, expectation)
	return expectation
}

// Then sets up ChatsService.Delete return parameters for the expectation previously defined by the When method
func (e *ChatsServiceMockDeleteExpectation) Then(err error) *ChatsServiceMock {
	e.results = &ChatsServiceMockDeleteResults{err}
	return e.mock
}

// Times sets number of times ChatsService.Delete should be invoked
func (mmDelete *mChatsServiceMockDelete) Times(n uint64) *mChatsServiceMockDelete {
	if n == 0 {
		mmDelete.mock.t.Fatalf("Times of ChatsServiceMock.Delete mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDelete.expectedInvocations, n)
	return mmDelete
}

func (mmDelete *mChatsServiceMockDelete) invocationsDone() bool {
	if len(mmDelete.expectations) == 0 && mmDelete.defaultExpectation == nil && mmDelete.mock.funcDelete == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDelete.mock.afterDeleteCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDelete.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Delete implements ChatsService
func (mmDelete *ChatsServiceMock) Delete(ctx context.Context, chatID int64) (err error) {
	mm_atomic.AddUint64(&mmDelete.beforeDeleteCounter, 1)
	defer mm_atomic.AddUint64(&mmDelete.afterDeleteCounter, 1)

	if mmDelete.inspectFuncDelete != nil {
		mmDelete.inspectFuncDelete(ctx, chatID)
	}

	mm_params := ChatsServiceMockDeleteParams{ctx, chatID}

	// Record call args
	mmDelete.DeleteMock.mutex.Lock()
	mmDelete.DeleteMock.callArgs = append(mmDelete.DeleteMock.callArgs, &mm_params)
	mmDelete.DeleteMock.mutex.Unlock()

	for _, e := range mmDelete.DeleteMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDelete.DeleteMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDelete.DeleteMock.defaultExpectation.Counter, 1)
		mm_want := mmDelete.DeleteMock.defaultExpectation.params
		mm_want_ptrs := mmDelete.DeleteMock.defaultExpectation.paramPtrs

		mm_got := ChatsServiceMockDeleteParams{ctx, chatID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDelete.t.Errorf("ChatsServiceMock.Delete got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.chatID != nil && !minimock.Equal(*mm_want_ptrs.chatID, mm_got.chatID) {
				mmDelete.t.Errorf("ChatsServiceMock.Delete got unexpected parameter chatID, want: %#v, got: %#v%s\n", *mm_want_ptrs.chatID, mm_got.chatID, minimock.Diff(*mm_want_ptrs.chatID, mm_got.chatID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDelete.t.Errorf("ChatsServiceMock.Delete got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDelete.DeleteMock.defaultExpectation.results
		if mm_results == nil {
			mmDelete.t.Fatal("No results are set for the ChatsServiceMock.Delete")
		}
		return (*mm_results).err
	}
	if mmDelete.funcDelete != nil {
		return mmDelete.funcDelete(ctx, chatID)
	}
	mmDelete.t.Fatalf("Unexpected call to ChatsServiceMock.Delete. %v %v", ctx, chatID)
	return
}

// DeleteAfterCounter returns a count of finished ChatsServiceMock.Delete invocations
func (mmDelete *ChatsServiceMock) DeleteAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.afterDeleteCounter)
}

// DeleteBeforeCounter returns a count of ChatsServiceMock.Delete invocations
func (mmDelete *ChatsServiceMock) DeleteBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.beforeDeleteCounter)
}

// Calls returns a list of arguments used in each call to ChatsServiceMock.Delete.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDelete *mChatsServiceMockDelete) Calls() []*ChatsServiceMockDeleteParams {
	mmDelete.mutex.RLock()

	argCopy := make([]*ChatsServiceMockDeleteParams, len(mmDelete.callArgs))
	copy(argCopy, mmDelete.callArgs)

	mmDelete.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteDone returns true if the count of the Delete invocations corresponds
// the number of defined expectations
func (m *ChatsServiceMock) MinimockDeleteDone() bool {
	if m.DeleteMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteMock.invocationsDone()
}

// MinimockDeleteInspect logs each unmet expectation
func (m *ChatsServiceMock) MinimockDeleteInspect() {
	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatsServiceMock.Delete with params: %#v", *e.params)
		}
	}

	afterDeleteCounter := mm_atomic.LoadUint64(&m.afterDeleteCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMock.defaultExpectation != nil && afterDeleteCounter < 1 {
		if m.DeleteMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ChatsServiceMock.Delete")
		} else {
			m.t.Errorf("Expected call to ChatsServiceMock.Delete with params: %#v", *m.DeleteMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDelete != nil && afterDeleteCounter < 1 {
		m.t.Error("Expected call to ChatsServiceMock.Delete")
	}

	if !m.DeleteMock.invocationsDone() && afterDeleteCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatsServiceMock.Delete but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteMock.expectedInvocations), afterDeleteCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ChatsServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockConnectChatInspect()

			m.MinimockCreateInspect()

			m.MinimockDeleteInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ChatsServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ChatsServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockConnectChatDone() &&
		m.MinimockCreateDone() &&
		m.MinimockDeleteDone()
}
