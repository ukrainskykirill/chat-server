// Code generated by http://github.com/gojuno/minimock (v3.3.14). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/ukrainskykirill/chat-server/internal/service.MessagesService -o messages_service_mock_test.go -n MessagesServiceMock -p service

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"

	"github.com/ukrainskykirill/chat-server/internal/model"
)

// MessagesServiceMock implements MessagesService
type MessagesServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreate          func(ctx context.Context, msgIn *model.MessageIn) (err error)
	inspectFuncCreate   func(ctx context.Context, msgIn *model.MessageIn)
	afterCreateCounter  uint64
	beforeCreateCounter uint64
	CreateMock          mMessagesServiceMockCreate
}

// NewMessagesServiceMock returns a mock for MessagesService
func NewMessagesServiceMock(t minimock.Tester) *MessagesServiceMock {
	m := &MessagesServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateMock = mMessagesServiceMockCreate{mock: m}
	m.CreateMock.callArgs = []*MessagesServiceMockCreateParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mMessagesServiceMockCreate struct {
	optional           bool
	mock               *MessagesServiceMock
	defaultExpectation *MessagesServiceMockCreateExpectation
	expectations       []*MessagesServiceMockCreateExpectation

	callArgs []*MessagesServiceMockCreateParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// MessagesServiceMockCreateExpectation specifies expectation struct of the MessagesService.Create
type MessagesServiceMockCreateExpectation struct {
	mock      *MessagesServiceMock
	params    *MessagesServiceMockCreateParams
	paramPtrs *MessagesServiceMockCreateParamPtrs
	results   *MessagesServiceMockCreateResults
	Counter   uint64
}

// MessagesServiceMockCreateParams contains parameters of the MessagesService.Create
type MessagesServiceMockCreateParams struct {
	ctx   context.Context
	msgIn *model.MessageIn
}

// MessagesServiceMockCreateParamPtrs contains pointers to parameters of the MessagesService.Create
type MessagesServiceMockCreateParamPtrs struct {
	ctx   *context.Context
	msgIn **model.MessageIn
}

// MessagesServiceMockCreateResults contains results of the MessagesService.Create
type MessagesServiceMockCreateResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreate *mMessagesServiceMockCreate) Optional() *mMessagesServiceMockCreate {
	mmCreate.optional = true
	return mmCreate
}

// Expect sets up expected params for MessagesService.Create
func (mmCreate *mMessagesServiceMockCreate) Expect(ctx context.Context, msgIn *model.MessageIn) *mMessagesServiceMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("MessagesServiceMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &MessagesServiceMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.paramPtrs != nil {
		mmCreate.mock.t.Fatalf("MessagesServiceMock.Create mock is already set by ExpectParams functions")
	}

	mmCreate.defaultExpectation.params = &MessagesServiceMockCreateParams{ctx, msgIn}
	for _, e := range mmCreate.expectations {
		if minimock.Equal(e.params, mmCreate.defaultExpectation.params) {
			mmCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreate.defaultExpectation.params)
		}
	}

	return mmCreate
}

// ExpectCtxParam1 sets up expected param ctx for MessagesService.Create
func (mmCreate *mMessagesServiceMockCreate) ExpectCtxParam1(ctx context.Context) *mMessagesServiceMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("MessagesServiceMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &MessagesServiceMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.params != nil {
		mmCreate.mock.t.Fatalf("MessagesServiceMock.Create mock is already set by Expect")
	}

	if mmCreate.defaultExpectation.paramPtrs == nil {
		mmCreate.defaultExpectation.paramPtrs = &MessagesServiceMockCreateParamPtrs{}
	}
	mmCreate.defaultExpectation.paramPtrs.ctx = &ctx

	return mmCreate
}

// ExpectMsgInParam2 sets up expected param msgIn for MessagesService.Create
func (mmCreate *mMessagesServiceMockCreate) ExpectMsgInParam2(msgIn *model.MessageIn) *mMessagesServiceMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("MessagesServiceMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &MessagesServiceMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.params != nil {
		mmCreate.mock.t.Fatalf("MessagesServiceMock.Create mock is already set by Expect")
	}

	if mmCreate.defaultExpectation.paramPtrs == nil {
		mmCreate.defaultExpectation.paramPtrs = &MessagesServiceMockCreateParamPtrs{}
	}
	mmCreate.defaultExpectation.paramPtrs.msgIn = &msgIn

	return mmCreate
}

// Inspect accepts an inspector function that has same arguments as the MessagesService.Create
func (mmCreate *mMessagesServiceMockCreate) Inspect(f func(ctx context.Context, msgIn *model.MessageIn)) *mMessagesServiceMockCreate {
	if mmCreate.mock.inspectFuncCreate != nil {
		mmCreate.mock.t.Fatalf("Inspect function is already set for MessagesServiceMock.Create")
	}

	mmCreate.mock.inspectFuncCreate = f

	return mmCreate
}

// Return sets up results that will be returned by MessagesService.Create
func (mmCreate *mMessagesServiceMockCreate) Return(err error) *MessagesServiceMock {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("MessagesServiceMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &MessagesServiceMockCreateExpectation{mock: mmCreate.mock}
	}
	mmCreate.defaultExpectation.results = &MessagesServiceMockCreateResults{err}
	return mmCreate.mock
}

// Set uses given function f to mock the MessagesService.Create method
func (mmCreate *mMessagesServiceMockCreate) Set(f func(ctx context.Context, msgIn *model.MessageIn) (err error)) *MessagesServiceMock {
	if mmCreate.defaultExpectation != nil {
		mmCreate.mock.t.Fatalf("Default expectation is already set for the MessagesService.Create method")
	}

	if len(mmCreate.expectations) > 0 {
		mmCreate.mock.t.Fatalf("Some expectations are already set for the MessagesService.Create method")
	}

	mmCreate.mock.funcCreate = f
	return mmCreate.mock
}

// When sets expectation for the MessagesService.Create which will trigger the result defined by the following
// Then helper
func (mmCreate *mMessagesServiceMockCreate) When(ctx context.Context, msgIn *model.MessageIn) *MessagesServiceMockCreateExpectation {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("MessagesServiceMock.Create mock is already set by Set")
	}

	expectation := &MessagesServiceMockCreateExpectation{
		mock:   mmCreate.mock,
		params: &MessagesServiceMockCreateParams{ctx, msgIn},
	}
	mmCreate.expectations = append(mmCreate.expectations, expectation)
	return expectation
}

// Then sets up MessagesService.Create return parameters for the expectation previously defined by the When method
func (e *MessagesServiceMockCreateExpectation) Then(err error) *MessagesServiceMock {
	e.results = &MessagesServiceMockCreateResults{err}
	return e.mock
}

// Times sets number of times MessagesService.Create should be invoked
func (mmCreate *mMessagesServiceMockCreate) Times(n uint64) *mMessagesServiceMockCreate {
	if n == 0 {
		mmCreate.mock.t.Fatalf("Times of MessagesServiceMock.Create mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreate.expectedInvocations, n)
	return mmCreate
}

func (mmCreate *mMessagesServiceMockCreate) invocationsDone() bool {
	if len(mmCreate.expectations) == 0 && mmCreate.defaultExpectation == nil && mmCreate.mock.funcCreate == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreate.mock.afterCreateCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreate.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Create implements MessagesService
func (mmCreate *MessagesServiceMock) Create(ctx context.Context, msgIn *model.MessageIn) (err error) {
	mm_atomic.AddUint64(&mmCreate.beforeCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmCreate.afterCreateCounter, 1)

	if mmCreate.inspectFuncCreate != nil {
		mmCreate.inspectFuncCreate(ctx, msgIn)
	}

	mm_params := MessagesServiceMockCreateParams{ctx, msgIn}

	// Record call args
	mmCreate.CreateMock.mutex.Lock()
	mmCreate.CreateMock.callArgs = append(mmCreate.CreateMock.callArgs, &mm_params)
	mmCreate.CreateMock.mutex.Unlock()

	for _, e := range mmCreate.CreateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCreate.CreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreate.CreateMock.defaultExpectation.Counter, 1)
		mm_want := mmCreate.CreateMock.defaultExpectation.params
		mm_want_ptrs := mmCreate.CreateMock.defaultExpectation.paramPtrs

		mm_got := MessagesServiceMockCreateParams{ctx, msgIn}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreate.t.Errorf("MessagesServiceMock.Create got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.msgIn != nil && !minimock.Equal(*mm_want_ptrs.msgIn, mm_got.msgIn) {
				mmCreate.t.Errorf("MessagesServiceMock.Create got unexpected parameter msgIn, want: %#v, got: %#v%s\n", *mm_want_ptrs.msgIn, mm_got.msgIn, minimock.Diff(*mm_want_ptrs.msgIn, mm_got.msgIn))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreate.t.Errorf("MessagesServiceMock.Create got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreate.CreateMock.defaultExpectation.results
		if mm_results == nil {
			mmCreate.t.Fatal("No results are set for the MessagesServiceMock.Create")
		}
		return (*mm_results).err
	}
	if mmCreate.funcCreate != nil {
		return mmCreate.funcCreate(ctx, msgIn)
	}
	mmCreate.t.Fatalf("Unexpected call to MessagesServiceMock.Create. %v %v", ctx, msgIn)
	return
}

// CreateAfterCounter returns a count of finished MessagesServiceMock.Create invocations
func (mmCreate *MessagesServiceMock) CreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.afterCreateCounter)
}

// CreateBeforeCounter returns a count of MessagesServiceMock.Create invocations
func (mmCreate *MessagesServiceMock) CreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.beforeCreateCounter)
}

// Calls returns a list of arguments used in each call to MessagesServiceMock.Create.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreate *mMessagesServiceMockCreate) Calls() []*MessagesServiceMockCreateParams {
	mmCreate.mutex.RLock()

	argCopy := make([]*MessagesServiceMockCreateParams, len(mmCreate.callArgs))
	copy(argCopy, mmCreate.callArgs)

	mmCreate.mutex.RUnlock()

	return argCopy
}

// MinimockCreateDone returns true if the count of the Create invocations corresponds
// the number of defined expectations
func (m *MessagesServiceMock) MinimockCreateDone() bool {
	if m.CreateMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateMock.invocationsDone()
}

// MinimockCreateInspect logs each unmet expectation
func (m *MessagesServiceMock) MinimockCreateInspect() {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MessagesServiceMock.Create with params: %#v", *e.params)
		}
	}

	afterCreateCounter := mm_atomic.LoadUint64(&m.afterCreateCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && afterCreateCounter < 1 {
		if m.CreateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MessagesServiceMock.Create")
		} else {
			m.t.Errorf("Expected call to MessagesServiceMock.Create with params: %#v", *m.CreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && afterCreateCounter < 1 {
		m.t.Error("Expected call to MessagesServiceMock.Create")
	}

	if !m.CreateMock.invocationsDone() && afterCreateCounter > 0 {
		m.t.Errorf("Expected %d calls to MessagesServiceMock.Create but found %d calls",
			mm_atomic.LoadUint64(&m.CreateMock.expectedInvocations), afterCreateCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *MessagesServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *MessagesServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *MessagesServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateDone()
}
